/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package skylens;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import javax.imageio.ImageIO;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.neuroph.core.NeuralNetwork;

/**
 *
 * @author mzdv
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageLoader = new javax.swing.JFileChooser();
        coreNNLoader = new javax.swing.JFileChooser();
        wingNNLoader = new javax.swing.JFileChooser();
        noseNNLoader = new javax.swing.JFileChooser();
        loadCoreNNButton = new javax.swing.JButton();
        loadWingNNButton = new javax.swing.JButton();
        loadNoseNN = new javax.swing.JButton();
        loadImageButton = new javax.swing.JButton();
        coreNNLabel = new javax.swing.JLabel();
        wingNNLabel = new javax.swing.JLabel();
        noseNNLoaded = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadCoreNNButton.setText("Load core NN");
        loadCoreNNButton.setActionCommand("loadCoreNN");
        loadCoreNNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCoreNNButtonActionPerformed(evt);
            }
        });

        loadWingNNButton.setText("Load wing NN");
        loadWingNNButton.setToolTipText("");
        loadWingNNButton.setActionCommand("loadWingNN");
        loadWingNNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadWingNNButtonActionPerformed(evt);
            }
        });

        loadNoseNN.setText("Load nose NN");
        loadNoseNN.setToolTipText("");
        loadNoseNN.setActionCommand("loadNoseNN");
        loadNoseNN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNoseNNActionPerformed(evt);
            }
        });

        loadImageButton.setText("Load image");
        loadImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageButtonActionPerformed(evt);
            }
        });

        coreNNLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        coreNNLabel.setForeground(new java.awt.Color(255, 0, 0));
        coreNNLabel.setText("UNLOADED");

        wingNNLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        wingNNLabel.setForeground(new java.awt.Color(255, 0, 0));
        wingNNLabel.setText("UNLOADED");

        noseNNLoaded.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        noseNNLoaded.setForeground(new java.awt.Color(255, 0, 0));
        noseNNLoaded.setText("UNLOADED");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loadImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadCoreNNButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(coreNNLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadWingNNButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(wingNNLabel)
                                .addGap(15, 15, 15)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(loadNoseNN))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(noseNNLoaded)))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadCoreNNButton)
                    .addComponent(loadWingNNButton)
                    .addComponent(loadNoseNN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coreNNLabel)
                    .addComponent(wingNNLabel)
                    .addComponent(noseNNLoaded))
                .addGap(68, 68, 68)
                .addComponent(resultLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(loadImageButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private BufferedImage image;
    private NeuralNetwork coreNN, wingNN, noseNN;

    private void loadCoreNNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCoreNNButtonActionPerformed
        coreNNLoader.setCurrentDirectory(new File(System.getProperty("user.dir")));
        coreNNLoader.addChoosableFileFilter(new FileNameExtensionFilter("Core NNet", "nnet"));
        coreNNLoader.setAcceptAllFileFilterUsed(false);
        coreNNLoader.showOpenDialog(this);

        try {
            File coreNNFile = coreNNLoader.getSelectedFile();
            coreNN = NeuralNetwork.createFromFile(coreNNFile);

            if (!coreNN.isEmpty()) {
                coreNNLabel.setText("LOADED");
                coreNNLabel.setForeground(Color.BLACK);
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_loadCoreNNButtonActionPerformed

    private void loadWingNNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadWingNNButtonActionPerformed
        wingNNLoader.setCurrentDirectory(new File(System.getProperty("user.dir")));
        wingNNLoader.addChoosableFileFilter(new FileNameExtensionFilter("Wing NNet", "nnet"));
        wingNNLoader.setAcceptAllFileFilterUsed(false);
        wingNNLoader.showOpenDialog(this);

        try {
            File wingNNFile = wingNNLoader.getSelectedFile();
            wingNN = NeuralNetwork.createFromFile(wingNNFile);

            if (!wingNN.isEmpty()) {
                wingNNLabel.setText("LOADED");
                wingNNLabel.setForeground(Color.BLACK);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_loadWingNNButtonActionPerformed

    private void loadNoseNNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNoseNNActionPerformed
        noseNNLoader.setCurrentDirectory(new File(System.getProperty("user.dir")));
        noseNNLoader.addChoosableFileFilter(new FileNameExtensionFilter("Tail NNet", "nnet"));
        noseNNLoader.setAcceptAllFileFilterUsed(false);
        noseNNLoader.showOpenDialog(this);

        try {
            File noseNNFile = noseNNLoader.getSelectedFile();
            noseNN = NeuralNetwork.createFromFile(noseNNFile);

            if (noseNN.isEmpty()) {
                noseNNLoaded.setText("LOADED");
                noseNNLoaded.setForeground(Color.BLACK);
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_loadNoseNNActionPerformed

    private void loadImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageButtonActionPerformed
        imageLoader.setCurrentDirectory(new File(System.getProperty("user.dir")));
        imageLoader.addChoosableFileFilter(new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes()));
        imageLoader.setAcceptAllFileFilterUsed(false);
        imageLoader.showOpenDialog(this);

        try {
            File imageFile = imageLoader.getSelectedFile();
            image = ImageIO.read(imageFile);

            if (image != null) {
                resultLabel.setText(SkylensRecognizer.recognize(image, getCoreNN(), wingNN, noseNN));
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_loadImageButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel coreNNLabel;
    private javax.swing.JFileChooser coreNNLoader;
    private javax.swing.JFileChooser imageLoader;
    private javax.swing.JButton loadCoreNNButton;
    private javax.swing.JButton loadImageButton;
    private javax.swing.JButton loadNoseNN;
    private javax.swing.JButton loadWingNNButton;
    private javax.swing.JLabel noseNNLoaded;
    private javax.swing.JFileChooser noseNNLoader;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JLabel wingNNLabel;
    private javax.swing.JFileChooser wingNNLoader;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the coreNN
     */
    public NeuralNetwork getCoreNN() {
        return coreNN;
    }

    /**
     * @param coreNN the coreNN to set
     */
    public void setCoreNN(NeuralNetwork coreNN) {
        this.coreNN = coreNN;
    }
}
